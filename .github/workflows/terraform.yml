name: Terraform

on:
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  push:
    branches: [main]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action'
        required: true
        default: 'plan'
        type: choice
        options: [plan, apply, destroy]

env:
  TF_VERSION: '1.5.7'
  TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_github_repository: ${{ github.repository }}
  TF_VAR_solana_rpc_url: ${{ secrets.SOLANA_RPC_URL }}
  TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
  TF_LOG: 'DEBUG'

jobs:
  plan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    
    - uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform init
        terraform fmt -check
        terraform validate
        terraform plan -no-color

  apply:
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    permissions:
      contents: read
      id-token: write
    environment:
      name: production
    steps:
    - uses: actions/checkout@v4
    
    - uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - uses: google-github-actions/setup-gcloud@v2
    
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
    
    - name: Terraform Apply
      run: |
        cd terraform
        terraform init
        
        # Handle imports if needed
        export TF_VAR_project_id="${{ secrets.GCP_PROJECT_ID }}"
        export TF_VAR_app_name="stb"
        ./handle_existing_resources.sh || true
        
        # Apply infrastructure
        terraform apply -auto-approve
        
        # Setup secrets
        for secret in WALLET_PRIVATE_KEY LINE_CHANNEL_TOKEN LINE_USER_ID; do
          secret_name=$(terraform output -raw ${secret,,}_secret_name 2>/dev/null || true)
          secret_value="${!secret:-PLACEHOLDER}"
          [ -n "$secret_name" ] && echo "$secret_value" | gcloud secrets versions add "$secret_name" --data-file=- || true
        done
        
        # Output URL
        echo "cloud_run_url=$(terraform output -raw cloud_run_service_url)" >> $GITHUB_OUTPUT

  destroy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    permissions:
      contents: read
      id-token: write
    environment:
      name: production
    steps:
    - uses: actions/checkout@v4
    
    - uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Destroy
      run: |
        cd terraform
        terraform init
        terraform destroy -auto-approve
