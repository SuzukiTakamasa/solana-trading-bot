name: Terraform Infrastructure Management

on:
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.7'
  TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_github_repository: ${{ github.repository }}
  TF_VAR_solana_rpc_url: ${{ secrets.SOLANA_RPC_URL }}
  TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}

jobs:
  terraform-checks:
    name: Terraform Validation and Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: TFSec Security Scan
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform
        soft_fail: true

    - name: Checkov Security Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform
        framework: terraform
        soft_fail: true
        output_format: github_failed_only
        download_external_modules: true

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-checks
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      id: plan
      run: |
        cd terraform
        terraform plan -out=tfplan -no-color | tee plan_output.txt
        
    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const script = require('./scripts/terraform-pr-comment.js');
          await script({github, context});

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-checks
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    
    permissions:
      contents: read
      id-token: write

    environment:
      name: production
      url: ${{ steps.output.outputs.cloud_run_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve

    - name: Get Terraform Outputs
      id: output
      run: |
        cd terraform
        echo "cloud_run_url=$(terraform output -raw cloud_run_service_url)" >> $GITHUB_OUTPUT
        echo "scheduler_job=$(terraform output -raw scheduler_job_name)" >> $GITHUB_OUTPUT

    - name: Update Secret Manager
      run: |
        # Update secrets in Secret Manager if they exist in GitHub Secrets
        if [ -n "${{ secrets.WALLET_PRIVATE_KEY }}" ]; then
          gcloud secrets versions add "${{ secrets.WALLET_PRIVATE_KEY }}" \
            "$(cd terraform && terraform output -json secret_names | jq -r '.wallet_private_key')"
        fi
        
        if [ -n "${{ secrets.LINE_CHANNEL_TOKEN }}" ]; then
          gcloud secrets versions add "${{ secrets.LINE_CHANNEL_TOKEN }}" \
            "$(cd terraform && terraform output -json secret_names | jq -r '.line_channel_token')"
        fi
        
        if [ -n "${{ secrets.LINE_USER_ID }}" ]; then
          gcloud secrets versions add "${{ secrets.LINE_USER_ID }}" \
            "$(cd terraform && terraform output -json secret_names | jq -r '.line_user_id')"
        fi

    - name: Trigger Application Deployment
      if: success()
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: infrastructure-updated
        client-payload: '{"cloud_run_url": "${{ steps.output.outputs.cloud_run_url }}", "ref": "${{ github.ref }}"}'

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    permissions:
      contents: read
      id-token: write

    environment:
      name: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Destroy
      run: |
        cd terraform
        terraform destroy -auto-approve